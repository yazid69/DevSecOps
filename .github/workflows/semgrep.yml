name: Vercel Preview Deployment and Semgrep Scan

on:
  pull_request:
    branches:
      - '*'

permissions:
  contents: read
  pull-requests: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    outputs:
      preview_url: ${{ steps.deploy.outputs.preview_url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install Vercel CLI
        run: npm install --global vercel@latest

      - name: Deploy Project to Vercel
        id: deploy
        run: |
          set -e
          echo "Starting deployment..."
          DEPLOYMENT_OUTPUT=$(vercel --token=${{ secrets.VERCEL_TOKEN }} --yes --confirm)
          echo "Deployment output: $DEPLOYMENT_OUTPUT"
          PREVIEW_URL=$(echo "$DEPLOYMENT_OUTPUT" | grep -o 'https://[^ ]*' | head -n 1)
          echo "Extracted Preview URL: $PREVIEW_URL"
          if [ -z "$PREVIEW_URL" ]; then
            echo "No preview URL found in deployment output"
            exit 1
          fi
          echo "::set-output name=preview_url::$PREVIEW_URL"
      
      - name: Log Preview URL
        run: echo "Preview URL is ${{ steps.deploy.outputs.preview_url }}"

  comment:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const previewUrl = "${{ needs.deploy.outputs.preview_url }}";
            const pr = context.payload.pull_request;
            if (pr) {
              const message = previewUrl ? `üöÄ Preview deployment is ready! Here is the URL: ${previewUrl}` : '‚ö†Ô∏è Preview deployment failed.';
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }

  semgrep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep scan
        run: semgrep --config=p/r2c-security-audit --json

      - name: Upload Semgrep findings
        if: failure()
        uses: actions/upload-artifact@v2
        with:
          name: semgrep-results
          path: semgrep-results.json

      - name: Comment Semgrep findings on PR
        if: always()
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const semgrepOutputStr = "${{ steps.semgrep.outputs.semgrep_output }}";
            const semgrepOutput = JSON.parse(semgrepOutputStr);
            const pr = context.payload.pull_request;
            if (pr) {
              const message = semgrepOutput && semgrepOutput.results && semgrepOutput.results.length > 0 ? `‚ö†Ô∏è Semgrep found some issues:\n\n${JSON.stringify(semgrepOutput.results, null, 2)}` : '‚úÖ Semgrep found no issues.';
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }