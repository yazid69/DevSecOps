name: Semgrep Scan

on:
  push:
    branches-ignore:
      - main
  pull_request:
    branches:
      - '*'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  semgrep:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install Semgrep
        run: pip install semgrep

      - name: Run Semgrep
        id: semgrep
        run: semgrep --config .semgrep.yml --json > semgrep-results.json

      - name: Check for XSS errors
        id: check_xss_errors
        run: |
          if grep -q "Possible XSS vulnerability detected" semgrep-results.json; then
            echo "::set-output name=xss_errors::true"
          else
            echo "::set-output name=xss_errors::false"
          fi

      - name: Upload Semgrep results
        uses: actions/upload-artifact@v2
        with:
          name: semgrep-results
          path: semgrep-results.json

  comment:
    runs-on: ubuntu-latest
    needs: semgrep
    steps:
      - name: Download Semgrep results
        uses: actions/download-artifact@v2
        with:
          name: semgrep-results

      - name: Comment on PR
        if: always() && needs.semgrep.outputs.xss_errors == 'true'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const results = JSON.parse(fs.readFileSync('semgrep-results.json', 'utf8'));
            let message = '## :warning: XSS Vulnerability Detected\n';
            results.results.forEach(result => {
              if (result.extra.message.includes("Possible XSS vulnerability detected")) {
                message += `- File: ${result.path}\n  Line: ${result.start.line}\n  Message: ${result.extra.message}\n\n`;
              }
            });
            const pr = context.payload.pull_request;
            if (pr) {
              await github.rest.issues.createComment({
                issue_number: pr.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: message
              });
            }
